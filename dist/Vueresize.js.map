{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///Vueresize.js","webpack:///webpack/bootstrap fe634ba75c417f57f5cc","webpack:///./src/Vueresize.js","webpack:///./~/css-element-queries/src/ResizeSensor.js","webpack:///./~/css-element-queries/index.js","webpack:///./~/css-element-queries/src/ElementQueries.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","global","apply","undefined","_cssElementQueries","Object","defineProperty","value","default","inserted","el","_ref","ResizeSensor","forEachElement","elements","callback","elementsType","prototype","toString","isCollectionTyped","jQuery","Elements","i","j","length","window","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","fn","setTimeout","element","EventQueue","q","add","ev","push","remove","newQueue","getComputedStyle","prop","currentStyle","getPropertyValue","style","attachResizeEvent","resized","resizedAttached","resizeSensor","document","createElement","className","styleChild","cssText","innerHTML","appendChild","position","dirty","rafId","newWidth","newHeight","expand","childNodes","expandChild","shrink","lastWidth","offsetWidth","lastHeight","offsetHeight","reset","width","height","scrollLeft","scrollTop","onResized","onScroll","addEvent","name","cb","attachEvent","addEventListener","elem","detach","contains","removeChild","ElementQueries","getEmSize","documentElement","fontSize","parseFloat","convertToPx","numbers","split","units","clientWidth","clientHeight","vw","vh","chooser","Math","SetupInformation","options","key","option","actualValue","attrValues","attrValue","attrName","addOption","idx","mode","property","join","attributes","hasOwnProperty","indexOf","k","setAttribute","substr","removeAttribute","setupElement","elementQueriesSetupInformation","elementQueriesSensor","trackingActive","queueQuery","selector","allQueries","getQuery","query","querySelectorAll","bind","$$","findElementQueriesElements","attachResponsiveImage","check","imageToDisplay","children","rules","minWidth","defaultImageId","lastActiveImage","loadedImages","display","image","Image","onload","src","sources","tagName","toLowerCase","getAttribute","rule","findResponsiveImages","extractQuery","css","match","smatch","replace","regex","exec","attrs","attrMatch","attrRegex","readRules","type","selectorText","cssRules","defaultCssInjected","init","withTracking","styleSheets","e","getElementsByTagName","update","pop","instance","domLoaded","test","navigator","userAgent","DOMLoadTimer","setInterval","readyState","clearInterval","listen"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,UAAAD,IAEAD,EAAA,UAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,IAGAR,EAAA,KDgBM,SAASL,EAAQD,EAASM,GAE/B,GAAIS,GAAgCC,EAA8BC,GAA8B,SAAWC,EAAQnB,GAEzGiB,GAAgCf,EAAQD,EAASM,EAAoB,IAAKS,EAAiC,EAAWE,EAA2E,kBAAnCF,GAAiDA,EAA+BI,MAAMnB,EAASgB,GAAiCD,IAAmEK,SAAlCH,IAAgDhB,EAAOD,QAAUiB,KAUvYb,KAAM,SAAUH,EAAQD,EAASqB,GAChC,YAEAC,QAAOC,eAAevB,EAAS,cAC3BwB,OAAO,IAEXxB,EAAQyB,SEvETC,SADW,SACDC,EADCC,GACY,GAARJ,GAAQI,EAARJ,OACX,EAAAH,EAAAQ,cAAaF,EAAI,iBAAMH,GAAMG,OF+EhC1B,EAAOD,QAAUA,EAAiB,WAKjC,SAASC,EAAQD,EAASM,GGxFhC,GAAAS,GAAAE,GAMA,SAAAnB,EAAAC,GAEAgB,EAAA,EAAAE,EAAA,kBAAAF,KAAAJ,KAAAX,EAAAM,EAAAN,EAAAC,GAAAc,IAAAK,SAAAH,IAAAhB,EAAAD,QAAAiB,KAMCb,KAAA,WAsBD,QAAA0B,GAAAC,EAAAC,GACA,GAAAC,GAAAX,OAAAY,UAAAC,SAAAxB,KAAAoB,GACAK,EAAA,mBAAAH,GACA,sBAAAA,GACA,4BAAAA,GACA,oBAAAA,GACA,mBAAAI,SAAAN,YAAAM,SACA,mBAAAC,WAAAP,YAAAO,UAEAC,EAAA,EAAAC,EAAAT,EAAAU,MACA,IAAAL,EACA,KAAkBG,EAAAC,EAAOD,IACzBP,EAAAD,EAAAQ,QAGAP,GAAAD,GAlCA,sBAAAW,QACA,WAKA,IAAAC,GAAAD,OAAAC,uBACAD,OAAAE,0BACAF,OAAAG,6BACA,SAAAC,GACA,MAAAJ,QAAAK,WAAAD,EAAA,KAoCAjB,EAAA,SAAAmB,EAAAhB,GAKA,QAAAiB,KACA,GAAAC,KACA9C,MAAA+C,IAAA,SAAAC,GACAF,EAAAG,KAAAD,GAGA,IAAAb,GAAAC,CACApC,MAAAO,KAAA,WACA,IAAA4B,EAAA,EAAAC,EAAAU,EAAAT,OAAyCF,EAAAC,EAAOD,IAChDW,EAAAX,GAAA5B,QAIAP,KAAAkD,OAAA,SAAAF,GACA,GAAAG,KACA,KAAAhB,EAAA,EAAAC,EAAAU,EAAAT,OAAwCF,EAAAC,EAAOD,IAC/CW,EAAAX,KAAAa,GAAAG,EAAAF,KAAAH,EAAAX,GAEAW,GAAAK,GAGAnD,KAAAqC,OAAA,WACA,MAAAS,GAAAT,QASA,QAAAe,GAAAR,EAAAS,GACA,MAAAT,GAAAU,aACAV,EAAAU,aAAAD,GACaf,OAAAc,iBACbd,OAAAc,iBAAAR,EAAA,MAAAW,iBAAAF,GAEAT,EAAAY,MAAAH,GASA,QAAAI,GAAAb,EAAAc,GACA,GAAAd,EAAAe,iBAGa,GAAAf,EAAAe,gBAEb,WADAf,GAAAe,gBAAAZ,IAAAW,OAHAd,GAAAe,gBAAA,GAAAd,GACAD,EAAAe,gBAAAZ,IAAAW,EAMAd,GAAAgB,aAAAC,SAAAC,cAAA,OACAlB,EAAAgB,aAAAG,UAAA,eACA,IAAAP,GAAA,+GACAQ,EAAA,sDAEApB,GAAAgB,aAAAJ,MAAAS,QAAAT,EACAZ,EAAAgB,aAAAM,UACA,4CAAAV,EAAA,iBACAQ,EAAA,0DAEAR,EAAA,iBACAQ,EAAA,2CAEApB,EAAAuB,YAAAvB,EAAAgB,cAEA,UAAAR,EAAAR,EAAA,cACAA,EAAAY,MAAAY,SAAA,WAGA,IAGAC,GAAAC,EAAAC,EAAAC,EAHAC,EAAA7B,EAAAgB,aAAAc,WAAA,GACAC,EAAAF,EAAAC,WAAA,GACAE,EAAAhC,EAAAgB,aAAAc,WAAA,GAEAG,EAAAjC,EAAAkC,YACAC,EAAAnC,EAAAoC,aAEAC,EAAA,WACAN,EAAAnB,MAAA0B,MAAA,WACAP,EAAAnB,MAAA2B,OAAA,WAEAV,EAAAW,WAAA,IACAX,EAAAY,UAAA,IAEAT,EAAAQ,WAAA,IACAR,EAAAS,UAAA,IAGAJ,IAEA,IAAAK,GAAA,WACAhB,EAAA,EAEAD,IAEAQ,EAAAN,EACAQ,EAAAP,EAEA5B,EAAAe,iBACAf,EAAAe,gBAAApD,SAIAgF,EAAA,WACAhB,EAAA3B,EAAAkC,YACAN,EAAA5B,EAAAoC,aACAX,EAAAE,GAAAM,GAAAL,GAAAO,EAEAV,IAAAC,IACAA,EAAA/B,EAAA+C,IAGAL,KAGAO,EAAA,SAAAjE,EAAAkE,EAAAC,GACAnE,EAAAoE,YACApE,EAAAoE,YAAA,KAAAF,EAAAC,GAEAnE,EAAAqE,iBAAAH,EAAAC,GAIAF,GAAAf,EAAA,SAAAc,GACAC,EAAAZ,EAAA,SAAAW,GAGA7D,EAAAkB,EAAA,SAAAiD,GACApC,EAAAoC,EAAAjE,KAGA5B,KAAA8F,OAAA,SAAA9C,GACAvB,EAAAqE,OAAAlD,EAAAI,IAoBA,OAhBAvB,GAAAqE,OAAA,SAAAlD,EAAAI,GACAtB,EAAAkB,EAAA,SAAAiD,GACAA,EAAAlC,iBAAA,kBAAAX,KACA6C,EAAAlC,gBAAAT,OAAAF,GACA6C,EAAAlC,gBAAAtB,WAEAwD,EAAAjC,eACAiC,EAAAE,SAAAF,EAAAjC,eACAiC,EAAAG,YAAAH,EAAAjC,oBAEAiC,GAAAjC,mBACAiC,GAAAlC,oBAKAlC,KHiGM,SAAS5B,EAAQD,EAASM,GIjUhCL,EAAAD,SACA6B,aAAAvB,EAAA,GACA+F,eAAA/F,EAAA,KJyUM,SAASL,EAAQD,EAASM,GK3UhC,GAAAS,GAAAC,EAAAC,GAMA,SAAAnB,EAAAC,GAEAiB,GAAAV,EAAA,IAAAS,EAAA,EAAAE,EAAA,kBAAAF,KAAAI,MAAAnB,EAAAgB,GAAAD,IAAAK,SAAAH,IAAAhB,EAAAD,QAAAiB,KAMCb,KAAA,SAAAyB,GAOD,GAAAwE,GAAA,WAUA,QAAAC,GAAAtD,GACAA,IACAA,EAAAiB,SAAAsC,gBAEA,IAAAC,GAAA9D,OAAAc,iBAAAR,EAAA,MAAAwD,QACA,OAAAC,YAAAD,IAAA,GAWA,QAAAE,GAAA1D,EAAAxB,GACA,GAAAmF,GAAAnF,EAAAoF,MAAA,MACAC,EAAAF,IAAAlE,OAAA,EAEA,QADAjB,EAAAiF,WAAAjF,GACAqF,GACA,SACA,MAAArF,EACA,UACA,MAAAA,GAAA8E,EAAAtD,EACA,WACA,MAAAxB,GAAA8E,GAIA,UACA,MAAA9E,GAAAyC,SAAAsC,gBAAAO,YAAA,GACA,UACA,MAAAtF,GAAAyC,SAAAsC,gBAAAQ,aAAA,GACA,YACA,WACA,GAAAC,GAAA/C,SAAAsC,gBAAAO,YAAA,IACAG,EAAAhD,SAAAsC,gBAAAQ,aAAA,IACAG,EAAAC,KAAA,SAAAN,EAAA,YACA,OAAArF,GAAA0F,EAAAF,EAAAC,EACA,SACA,MAAAzF,IAWA,QAAA4F,GAAApE,GACA5C,KAAA4C,UACA5C,KAAAiH,UACA,IAAAC,GAAAC,EAAA/F,EAAAgG,EAAAC,EAAAC,EAAAC,EAAArC,EAAA,EAAAC,EAAA,CAKAnF,MAAAwH,UAAA,SAAAL,GACA,GAAAM,IAAAN,EAAAO,KAAAP,EAAAQ,SAAAR,EAAA/F,OAAAwG,KAAA,IACA5H,MAAAiH,QAAAQ,GAAAN,EAGA,IAAAU,IAAA,kDAKA7H,MAAAO,KAAA,WAEA2E,EAAAlF,KAAA4C,QAAAkC,YACAK,EAAAnF,KAAA4C,QAAAoC,aAEAqC,IAEA,KAAAH,IAAAlH,MAAAiH,QACAjH,KAAAiH,QAAAa,eAAAZ,KAGAC,EAAAnH,KAAAiH,QAAAC,GAEA9F,EAAAkF,EAAAtG,KAAA4C,QAAAuE,EAAA/F,OAEAgG,EAAA,SAAAD,EAAAQ,SAAAzC,EAAAC,EACAoC,EAAAJ,EAAAO,KAAA,IAAAP,EAAAQ,SACAL,EAAA,GAEA,OAAAH,EAAAO,MAAAN,GAAAhG,IACAkG,GAAAH,EAAA/F,OAGA,OAAA+F,EAAAO,MAAAN,GAAAhG,IACAkG,GAAAH,EAAA/F,OAGAiG,EAAAE,KAAAF,EAAAE,GAAA,IACAD,IAAA,SAAAD,EAAAE,GAAA,KAAAQ,QAAA,IAAAT,EAAA,OACAD,EAAAE,IAAA,IAAAD,GAIA,QAAAU,KAAAH,GACAA,EAAAC,eAAAE,KAEAX,EAAAQ,EAAAG,IACAhI,KAAA4C,QAAAqF,aAAAJ,EAAAG,GAAAX,EAAAQ,EAAAG,IAAAE,OAAA,IAEAlI,KAAA4C,QAAAuF,gBAAAN,EAAAG,MAUA,QAAAI,GAAAxF,EAAAqE,GACArE,EAAAyF,+BACAzF,EAAAyF,+BAAAb,UAAAP,IAEArE,EAAAyF,+BAAA,GAAArB,GAAApE,GACAA,EAAAyF,+BAAAb,UAAAP,GACArE,EAAA0F,qBAAA,GAAA7G,GAAAmB,EAAA,WACAA,EAAAyF,+BAAA9H,UAGAqC,EAAAyF,+BAAA9H,OAEAgI,GAAA5G,EAAAoG,QAAAnF,GAAA,GACAjB,EAAAsB,KAAAL,GAWA,QAAA4F,GAAAC,EAAAf,EAAAC,EAAAvG,GACA,mBAAAsH,GAAAhB,KAAAgB,EAAAhB,OACA,mBAAAgB,GAAAhB,GAAAC,KAAAe,EAAAhB,GAAAC,OACA,mBAAAe,GAAAhB,GAAAC,GAAAvG,GAAAsH,EAAAhB,GAAAC,GAAAvG,GAAAqH,EACAC,EAAAhB,GAAAC,GAAAvG,IAAA,IAAAqH,EAGA,QAAAE,KACA,GAAAC,EAKA,IAJA/E,SAAAgF,mBAAAD,EAAA/E,SAAAgF,iBAAAC,KAAAjF,WACA+E,GAAA,mBAAAG,MAAAH,EAAAG,IACAH,GAAA,mBAAA3G,UAAA2G,EAAA3G,SAEA2G,EACA,mEAGA,OAAAA,GAMA,QAAAI,KACA,GAAAJ,GAAAD,GAEA,QAAAjB,KAAAgB,GAAA,GAAAA,EAAAZ,eAAAJ,GAEA,OAAAC,KAAAe,GAAAhB,GAAA,GAAAgB,EAAAhB,GAAAI,eAAAH,GACA,OAAAvG,KAAAsH,GAAAhB,GAAAC,GAAA,GAAAe,EAAAhB,GAAAC,GAAAG,eAAA1G,GAEA,OADAO,GAAAiH,EAAAF,EAAAhB,GAAAC,GAAAvG,IACAe,EAAA,EAAAC,EAAAT,EAAAU,OAA4DF,EAAAC,EAAOD,IACnEiG,EAAAzG,EAAAQ,IACAuF,OACAC,WACAvG,UAaA,QAAA6H,GAAArG,GAqCA,QAAAsG,KACA,GAAA/G,GAAAgH,GAAA,CAEA,KAAAhH,IAAAiH,GACAA,EAAAtB,eAAA3F,IAEAkH,EAAAlH,GAAAmH,UACA1G,EAAAkC,YAAAuE,EAAAlH,GAAAmH,WACAH,EAAAhH,EAUA,IALAgH,IAEAA,EAAAI,GAGAC,GAAAL,EAGA,GAAAM,EAAAN,GAkBAC,EAAAI,GAAAhG,MAAAkG,QAAA,OACAN,EAAAD,GAAA3F,MAAAkG,QAAA,QACAF,EAAAL,MApBA,CAIA,GAAAQ,GAAA,GAAAC,MACAD,GAAAE,OAAA,WACAT,EAAAD,GAAAW,IAAAC,EAAAZ,GAEAC,EAAAI,GAAAhG,MAAAkG,QAAA,OACAN,EAAAD,GAAA3F,MAAAkG,QAAA,QAEAD,EAAAN,IAAA,EAEAK,EAAAL,GAGAQ,EAAAG,IAAAC,EAAAZ,OAQAC,GAAAD,GAAAW,IAAAC,EAAAZ,GAjFA,GAAAC,MACAC,KACAU,KACAR,EAAA,EACAC,GAAA,EACAC,IAEA,QAAAtH,KAAAS,GAAAwG,SACA,GAAAxG,EAAAwG,SAAAtB,eAAA3F,IAEAS,EAAAwG,SAAAjH,GAAA6H,SAAA,QAAApH,EAAAwG,SAAAjH,GAAA6H,QAAAC,cAAA,CACAb,EAAAnG,KAAAL,EAAAwG,SAAAjH,GAEA,IAAAmH,GAAA1G,EAAAwG,SAAAjH,GAAA+H,aAAA,cAAAtH,EAAAwG,SAAAjH,GAAA+H,aAAA,kBAEAJ,EAAAlH,EAAAwG,SAAAjH,GAAA+H,aAAA,aAAAtH,EAAAwG,SAAAjH,GAAA+H,aAAA,MAEAH,GAAA9G,KAAA6G,EAEA,IAAAK,IACAb,WAGAD,GAAApG,KAAAkH,GAEAb,EAIA1G,EAAAwG,SAAAjH,GAAAqB,MAAAkG,QAAA,QAHAH,EAAAH,EAAA/G,OAAA,EACAO,EAAAwG,SAAAjH,GAAAqB,MAAAkG,QAAA,SAOAF,EAAAD,EAmDA3G,EAAAgB,aAAA,GAAAnC,GAAAmB,EAAAsG,GACAA,IAEAX,GACA5G,EAAAsB,KAAAL,GAIA,QAAAwH,KAIA,OAHAxB,GAAAD,IAEAhH,EAAAiH,EAAA,8CACAzG,EAAA,EAAAC,EAAAT,EAAAU,OAAgDF,EAAAC,EAAOD,IACvD8G,EAAAtH,EAAAQ,IASA,QAAAkI,GAAAC,GACA,GAAAC,GACAC,CAEA,KADAF,IAAAG,QAAA,UACA,QAAAF,EAAAG,EAAAC,KAAAL,KAIA,IAHAE,EAAAD,EAAA,GAAAA,EAAA,GACAK,MAAAL,EAAA,GAEA,QAAAM,UAAAC,EAAAH,KAAAC,SACApC,EAAAgC,EAAAK,UAAA,GAAAA,UAAA,GAAAA,UAAA,IAQA,QAAAE,GAAA1B,GACA,GAAAZ,GAAA,EACA,IAAAY,EAGA,mBAAAA,GACAA,IAAAY,eACA,IAAAZ,EAAAtB,QAAA,mBAAAsB,EAAAtB,QAAA,cACAsC,EAAAhB,OAGA,QAAAlH,GAAA,EAAAC,EAAAiH,EAAAhH,OAAiDF,EAAAC,EAAOD,IACxD,IAAAkH,EAAAlH,GAAA6I,MACAvC,EAAAY,EAAAlH,GAAA8I,cAAA5B,EAAAlH,GAAA8B,SACA,IAAAwE,EAAAV,QAAA,oBAAAU,EAAAV,QAAA,cACAsC,EAAA5B,IACyB,IAAAA,EAAAV,QAAA,mBAAAU,EAAAV,QAAA,cACzBsC,EAAA5B,IAEqB,IAAAY,EAAAlH,GAAA6I,MACrBD,EAAA1B,EAAAlH,GAAA+I,UAAA7B,EAAAlH,GAAAkH,OAxVA,GAAAd,IAAA,EACA5G,KAqJA+G,KAwJAgC,EAAA,4HACAI,EAAA,mFA+CAK,GAAA,CAQAnL,MAAAoL,KAAA,SAAAC,GACA9C,EAAA,mBAAA8C,KAEA,QAAAlJ,GAAA,EAAAC,EAAAyB,SAAAyH,YAAAjJ,OAA4DF,EAAAC,EAAOD,IACnE,IACA4I,EAAAlH,SAAAyH,YAAAnJ,GAAA+I,UAAArH,SAAAyH,YAAAnJ,GAAAkH,OAAAxF,SAAAyH,YAAAnJ,GAAA8B,SACiB,MAAAsH,GACjB,qBAAAA,EAAA9F,KACA,KAAA8F,GAKA,IAAAJ,EAAA,CACA,GAAA3H,GAAAK,SAAAC,cAAA,QACAN,GAAAwH,KAAA,WACAxH,EAAAU,UAAA,6JACAL,SAAA2H,qBAAA,WAAArH,YAAAX,GACA2H,GAAA,EAGAnC,IACAoB,KAQApK,KAAAyL,OAAA,SAAAJ,GACArL,KAAAoL,KAAAC,IAGArL,KAAA8F,OAAA,WACA,IAAA9F,KAAAqL,aACA,qLAKA,KADA,GAAAzI,GACAA,EAAAjB,EAAA+J,OACAzF,EAAAH,OAAAlD,EAGAjB,OASAsE,GAAAwF,OAAA,SAAAJ,GACApF,EAAA0F,SAAAF,OAAAJ,IAQApF,EAAAH,OAAA,SAAAlD,GACAA,EAAAyF,gCAEAzF,EAAA0F,qBAAAxC,eACAlD,GAAAyF,qCACAzF,GAAA0F,sBAES1F,EAAAgB,eAGThB,EAAAgB,aAAAkC,eACAlD,GAAAgB,eAMAqC,EAAAoF,cAAA,EAEApF,EAAAmF,KAAA,WACAnF,EAAA0F,WACA1F,EAAA0F,SAAA,GAAA1F,IAGAA,EAAA0F,SAAAP,KAAAnF,EAAAoF,cAGA,IAAAO,GAAA,SAAAhK,GAYA,GAAAiC,SAAA+B,iBACA/B,SAAA+B,iBAAA,mBAAAhE,GAAA,OAGA,yBAAAiK,KAAAC,UAAAC,WACA,GAAAC,GAAAC,YAAA,WACA,mBAAAJ,KAAAhI,SAAAqI,cACAtK,IACAuK,cAAAH,KAEa,QAGb1J,QAAAuH,OAAAjI,EAgBA,OAbAqE,GAAAmG,OAAA,WACAR,EAAA3F,EAAAmF,OAIA,mBAAAvL,IAAA,mBAAAA,GAAAD,QACAC,EAAAD,QAAAqG,GAGA3D,OAAA2D,iBACAA,EAAAmG,UAGAnG","file":"Vueresize.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vueresize\"] = factory();\n\telse\n\t\troot[\"Vueresize\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vueresize\"] = factory();\n\telse\n\t\troot[\"Vueresize\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports !== \"undefined\") {\n\t        factory(module, exports, require('css-element-queries'));\n\t    } else {\n\t        var mod = {\n\t            exports: {}\n\t        };\n\t        factory(mod, mod.exports, global.cssElementQueries);\n\t        global.Vueresize = mod.exports;\n\t    }\n\t})(this, function (module, exports, _cssElementQueries) {\n\t    'use strict';\n\t\n\t    Object.defineProperty(exports, \"__esModule\", {\n\t        value: true\n\t    });\n\t    exports.default = {\n\t        inserted: function inserted(el, _ref) {\n\t            var value = _ref.value;\n\t\n\t            (0, _cssElementQueries.ResizeSensor)(el, function () {\n\t                return value(el);\n\t            });\n\t        }\n\t    };\n\t    module.exports = exports['default'];\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n\t * directory of this distribution and at\n\t * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n\t */\n\t;\n\t(function (root, factory) {\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports === \"object\") {\n\t        module.exports = factory();\n\t    } else {\n\t        root.ResizeSensor = factory();\n\t    }\n\t}(this, function () {\n\t\n\t    //Make sure it does not throw in a SSR (Server Side Rendering) situation\n\t    if (typeof window === \"undefined\") {\n\t        return null;\n\t    }\n\t    // Only used for the dirty checking, so the event callback count is limted to max 1 call per fps per sensor.\n\t    // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and\n\t    // would generate too many unnecessary events.\n\t    var requestAnimationFrame = window.requestAnimationFrame ||\n\t        window.mozRequestAnimationFrame ||\n\t        window.webkitRequestAnimationFrame ||\n\t        function (fn) {\n\t            return window.setTimeout(fn, 20);\n\t        };\n\t\n\t    /**\n\t     * Iterate over each of the provided element(s).\n\t     *\n\t     * @param {HTMLElement|HTMLElement[]} elements\n\t     * @param {Function}                  callback\n\t     */\n\t    function forEachElement(elements, callback){\n\t        var elementsType = Object.prototype.toString.call(elements);\n\t        var isCollectionTyped = ('[object Array]' === elementsType\n\t            || ('[object NodeList]' === elementsType)\n\t            || ('[object HTMLCollection]' === elementsType)\n\t            || ('[object Object]' === elementsType)\n\t            || ('undefined' !== typeof jQuery && elements instanceof jQuery) //jquery\n\t            || ('undefined' !== typeof Elements && elements instanceof Elements) //mootools\n\t        );\n\t        var i = 0, j = elements.length;\n\t        if (isCollectionTyped) {\n\t            for (; i < j; i++) {\n\t                callback(elements[i]);\n\t            }\n\t        } else {\n\t            callback(elements);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Class for dimension change detection.\n\t     *\n\t     * @param {Element|Element[]|Elements|jQuery} element\n\t     * @param {Function} callback\n\t     *\n\t     * @constructor\n\t     */\n\t    var ResizeSensor = function(element, callback) {\n\t        /**\n\t         *\n\t         * @constructor\n\t         */\n\t        function EventQueue() {\n\t            var q = [];\n\t            this.add = function(ev) {\n\t                q.push(ev);\n\t            };\n\t\n\t            var i, j;\n\t            this.call = function() {\n\t                for (i = 0, j = q.length; i < j; i++) {\n\t                    q[i].call();\n\t                }\n\t            };\n\t\n\t            this.remove = function(ev) {\n\t                var newQueue = [];\n\t                for(i = 0, j = q.length; i < j; i++) {\n\t                    if(q[i] !== ev) newQueue.push(q[i]);\n\t                }\n\t                q = newQueue;\n\t            }\n\t\n\t            this.length = function() {\n\t                return q.length;\n\t            }\n\t        }\n\t\n\t        /**\n\t         * @param {HTMLElement} element\n\t         * @param {String}      prop\n\t         * @returns {String|Number}\n\t         */\n\t        function getComputedStyle(element, prop) {\n\t            if (element.currentStyle) {\n\t                return element.currentStyle[prop];\n\t            } else if (window.getComputedStyle) {\n\t                return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t            } else {\n\t                return element.style[prop];\n\t            }\n\t        }\n\t\n\t        /**\n\t         *\n\t         * @param {HTMLElement} element\n\t         * @param {Function}    resized\n\t         */\n\t        function attachResizeEvent(element, resized) {\n\t            if (!element.resizedAttached) {\n\t                element.resizedAttached = new EventQueue();\n\t                element.resizedAttached.add(resized);\n\t            } else if (element.resizedAttached) {\n\t                element.resizedAttached.add(resized);\n\t                return;\n\t            }\n\t\n\t            element.resizeSensor = document.createElement('div');\n\t            element.resizeSensor.className = 'resize-sensor';\n\t            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n\t            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\t\n\t            element.resizeSensor.style.cssText = style;\n\t            element.resizeSensor.innerHTML =\n\t                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + '\"></div>' +\n\t                '</div>' +\n\t                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n\t                '</div>';\n\t            element.appendChild(element.resizeSensor);\n\t\n\t            if (getComputedStyle(element, 'position') == 'static') {\n\t                element.style.position = 'relative';\n\t            }\n\t\n\t            var expand = element.resizeSensor.childNodes[0];\n\t            var expandChild = expand.childNodes[0];\n\t            var shrink = element.resizeSensor.childNodes[1];\n\t            var dirty, rafId, newWidth, newHeight;\n\t            var lastWidth = element.offsetWidth;\n\t            var lastHeight = element.offsetHeight;\n\t\n\t            var reset = function() {\n\t                expandChild.style.width = '100000px';\n\t                expandChild.style.height = '100000px';\n\t\n\t                expand.scrollLeft = 100000;\n\t                expand.scrollTop = 100000;\n\t\n\t                shrink.scrollLeft = 100000;\n\t                shrink.scrollTop = 100000;\n\t            };\n\t\n\t            reset();\n\t\n\t            var onResized = function() {\n\t                rafId = 0;\n\t\n\t                if (!dirty) return;\n\t\n\t                lastWidth = newWidth;\n\t                lastHeight = newHeight;\n\t\n\t                if (element.resizedAttached) {\n\t                    element.resizedAttached.call();\n\t                }\n\t            };\n\t\n\t            var onScroll = function() {\n\t                newWidth = element.offsetWidth;\n\t                newHeight = element.offsetHeight;\n\t                dirty = newWidth != lastWidth || newHeight != lastHeight;\n\t\n\t                if (dirty && !rafId) {\n\t                    rafId = requestAnimationFrame(onResized);\n\t                }\n\t\n\t                reset();\n\t            };\n\t\n\t            var addEvent = function(el, name, cb) {\n\t                if (el.attachEvent) {\n\t                    el.attachEvent('on' + name, cb);\n\t                } else {\n\t                    el.addEventListener(name, cb);\n\t                }\n\t            };\n\t\n\t            addEvent(expand, 'scroll', onScroll);\n\t            addEvent(shrink, 'scroll', onScroll);\n\t        }\n\t\n\t        forEachElement(element, function(elem){\n\t            attachResizeEvent(elem, callback);\n\t        });\n\t\n\t        this.detach = function(ev) {\n\t            ResizeSensor.detach(element, ev);\n\t        };\n\t    };\n\t\n\t    ResizeSensor.detach = function(element, ev) {\n\t        forEachElement(element, function(elem){\n\t            if(elem.resizedAttached && typeof ev == \"function\"){\n\t                elem.resizedAttached.remove(ev);\n\t                if(elem.resizedAttached.length()) return;\n\t            }\n\t            if (elem.resizeSensor) {\n\t                if (elem.contains(elem.resizeSensor)) {\n\t                    elem.removeChild(elem.resizeSensor);\n\t                }\n\t                delete elem.resizeSensor;\n\t                delete elem.resizedAttached;\n\t            }\n\t        });\n\t    };\n\t\n\t    return ResizeSensor;\n\t\n\t}));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t    ResizeSensor: __webpack_require__(1),\n\t    ElementQueries: __webpack_require__(3)\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n\t * directory of this distribution and at\n\t * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n\t */\n\t;\n\t(function (root, factory) {\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports === \"object\") {\n\t        module.exports = factory(require('./ResizeSensor.js'));\n\t    } else {\n\t        root.ElementQueries = factory(root.ResizeSensor);\n\t    }\n\t}(this, function (ResizeSensor) {\n\t\n\t    /**\n\t     *\n\t     * @type {Function}\n\t     * @constructor\n\t     */\n\t    var ElementQueries = function() {\n\t\n\t        var trackingActive = false;\n\t        var elements = [];\n\t\n\t        /**\n\t         *\n\t         * @param element\n\t         * @returns {Number}\n\t         */\n\t        function getEmSize(element) {\n\t            if (!element) {\n\t                element = document.documentElement;\n\t            }\n\t            var fontSize = window.getComputedStyle(element, null).fontSize;\n\t            return parseFloat(fontSize) || 16;\n\t        }\n\t\n\t        /**\n\t         *\n\t         * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE\n\t         *\n\t         * @param {HTMLElement} element\n\t         * @param {*} value\n\t         * @returns {*}\n\t         */\n\t        function convertToPx(element, value) {\n\t            var numbers = value.split(/\\d/);\n\t            var units = numbers[numbers.length-1];\n\t            value = parseFloat(value);\n\t            switch (units) {\n\t                case \"px\":\n\t                    return value;\n\t                case \"em\":\n\t                    return value * getEmSize(element);\n\t                case \"rem\":\n\t                    return value * getEmSize();\n\t                // Viewport units!\n\t                // According to http://quirksmode.org/mobile/tableViewport.html\n\t                // documentElement.clientWidth/Height gets us the most reliable info\n\t                case \"vw\":\n\t                    return value * document.documentElement.clientWidth / 100;\n\t                case \"vh\":\n\t                    return value * document.documentElement.clientHeight / 100;\n\t                case \"vmin\":\n\t                case \"vmax\":\n\t                    var vw = document.documentElement.clientWidth / 100;\n\t                    var vh = document.documentElement.clientHeight / 100;\n\t                    var chooser = Math[units === \"vmin\" ? \"min\" : \"max\"];\n\t                    return value * chooser(vw, vh);\n\t                default:\n\t                    return value;\n\t                // for now, not supporting physical units (since they are just a set number of px)\n\t                // or ex/ch (getting accurate measurements is hard)\n\t            }\n\t        }\n\t\n\t        /**\n\t         *\n\t         * @param {HTMLElement} element\n\t         * @constructor\n\t         */\n\t        function SetupInformation(element) {\n\t            this.element = element;\n\t            this.options = {};\n\t            var key, option, width = 0, height = 0, value, actualValue, attrValues, attrValue, attrName;\n\t\n\t            /**\n\t             * @param {Object} option {mode: 'min|max', property: 'width|height', value: '123px'}\n\t             */\n\t            this.addOption = function(option) {\n\t                var idx = [option.mode, option.property, option.value].join(',');\n\t                this.options[idx] = option;\n\t            };\n\t\n\t            var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];\n\t\n\t            /**\n\t             * Extracts the computed width/height and sets to min/max- attribute.\n\t             */\n\t            this.call = function() {\n\t                // extract current dimensions\n\t                width = this.element.offsetWidth;\n\t                height = this.element.offsetHeight;\n\t\n\t                attrValues = {};\n\t\n\t                for (key in this.options) {\n\t                    if (!this.options.hasOwnProperty(key)){\n\t                        continue;\n\t                    }\n\t                    option = this.options[key];\n\t\n\t                    value = convertToPx(this.element, option.value);\n\t\n\t                    actualValue = option.property == 'width' ? width : height;\n\t                    attrName = option.mode + '-' + option.property;\n\t                    attrValue = '';\n\t\n\t                    if (option.mode == 'min' && actualValue >= value) {\n\t                        attrValue += option.value;\n\t                    }\n\t\n\t                    if (option.mode == 'max' && actualValue <= value) {\n\t                        attrValue += option.value;\n\t                    }\n\t\n\t                    if (!attrValues[attrName]) attrValues[attrName] = '';\n\t                    if (attrValue && -1 === (' '+attrValues[attrName]+' ').indexOf(' ' + attrValue + ' ')) {\n\t                        attrValues[attrName] += ' ' + attrValue;\n\t                    }\n\t                }\n\t\n\t                for (var k in attributes) {\n\t                    if(!attributes.hasOwnProperty(k)) continue;\n\t\n\t                    if (attrValues[attributes[k]]) {\n\t                        this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));\n\t                    } else {\n\t                        this.element.removeAttribute(attributes[k]);\n\t                    }\n\t                }\n\t            };\n\t        }\n\t\n\t        /**\n\t         * @param {HTMLElement} element\n\t         * @param {Object}      options\n\t         */\n\t        function setupElement(element, options) {\n\t            if (element.elementQueriesSetupInformation) {\n\t                element.elementQueriesSetupInformation.addOption(options);\n\t            } else {\n\t                element.elementQueriesSetupInformation = new SetupInformation(element);\n\t                element.elementQueriesSetupInformation.addOption(options);\n\t                element.elementQueriesSensor = new ResizeSensor(element, function() {\n\t                    element.elementQueriesSetupInformation.call();\n\t                });\n\t            }\n\t            element.elementQueriesSetupInformation.call();\n\t\n\t            if (trackingActive && elements.indexOf(element) < 0) {\n\t                elements.push(element);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * @param {String} selector\n\t         * @param {String} mode min|max\n\t         * @param {String} property width|height\n\t         * @param {String} value\n\t         */\n\t        var allQueries = {};\n\t        function queueQuery(selector, mode, property, value) {\n\t            if (typeof(allQueries[mode]) == 'undefined') allQueries[mode] = {};\n\t            if (typeof(allQueries[mode][property]) == 'undefined') allQueries[mode][property] = {};\n\t            if (typeof(allQueries[mode][property][value]) == 'undefined') allQueries[mode][property][value] = selector;\n\t            else allQueries[mode][property][value] += ','+selector;\n\t        }\n\t\n\t        function getQuery() {\n\t            var query;\n\t            if (document.querySelectorAll) query = document.querySelectorAll.bind(document);\n\t            if (!query && 'undefined' !== typeof $$) query = $$;\n\t            if (!query && 'undefined' !== typeof jQuery) query = jQuery;\n\t\n\t            if (!query) {\n\t                throw 'No document.querySelectorAll, jQuery or Mootools\\'s $$ found.';\n\t            }\n\t\n\t            return query;\n\t        }\n\t\n\t        /**\n\t         * Start the magic. Go through all collected rules (readRules()) and attach the resize-listener.\n\t         */\n\t        function findElementQueriesElements() {\n\t            var query = getQuery();\n\t\n\t            for (var mode in allQueries) if (allQueries.hasOwnProperty(mode)) {\n\t\n\t                for (var property in allQueries[mode]) if (allQueries[mode].hasOwnProperty(property)) {\n\t                    for (var value in allQueries[mode][property]) if (allQueries[mode][property].hasOwnProperty(value)) {\n\t                        var elements = query(allQueries[mode][property][value]);\n\t                        for (var i = 0, j = elements.length; i < j; i++) {\n\t                            setupElement(elements[i], {\n\t                                mode: mode,\n\t                                property: property,\n\t                                value: value\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t\n\t            }\n\t        }\n\t\n\t        /**\n\t         *\n\t         * @param {HTMLElement} element\n\t         */\n\t        function attachResponsiveImage(element) {\n\t            var children = [];\n\t            var rules = [];\n\t            var sources = [];\n\t            var defaultImageId = 0;\n\t            var lastActiveImage = -1;\n\t            var loadedImages = [];\n\t\n\t            for (var i in element.children) {\n\t                if(!element.children.hasOwnProperty(i)) continue;\n\t\n\t                if (element.children[i].tagName && element.children[i].tagName.toLowerCase() === 'img') {\n\t                    children.push(element.children[i]);\n\t\n\t                    var minWidth = element.children[i].getAttribute('min-width') || element.children[i].getAttribute('data-min-width');\n\t                    //var minHeight = element.children[i].getAttribute('min-height') || element.children[i].getAttribute('data-min-height');\n\t                    var src = element.children[i].getAttribute('data-src') || element.children[i].getAttribute('url');\n\t\n\t                    sources.push(src);\n\t\n\t                    var rule = {\n\t                        minWidth: minWidth\n\t                    };\n\t\n\t                    rules.push(rule);\n\t\n\t                    if (!minWidth) {\n\t                        defaultImageId = children.length - 1;\n\t                        element.children[i].style.display = 'block';\n\t                    } else {\n\t                        element.children[i].style.display = 'none';\n\t                    }\n\t                }\n\t            }\n\t\n\t            lastActiveImage = defaultImageId;\n\t\n\t            function check() {\n\t                var imageToDisplay = false, i;\n\t\n\t                for (i in children){\n\t                    if(!children.hasOwnProperty(i)) continue;\n\t\n\t                    if (rules[i].minWidth) {\n\t                        if (element.offsetWidth > rules[i].minWidth) {\n\t                            imageToDisplay = i;\n\t                        }\n\t                    }\n\t                }\n\t\n\t                if (!imageToDisplay) {\n\t                    //no rule matched, show default\n\t                    imageToDisplay = defaultImageId;\n\t                }\n\t\n\t                if (lastActiveImage != imageToDisplay) {\n\t                    //image change\n\t\n\t                    if (!loadedImages[imageToDisplay]){\n\t                        //image has not been loaded yet, we need to load the image first in memory to prevent flash of\n\t                        //no content\n\t\n\t                        var image = new Image();\n\t                        image.onload = function() {\n\t                            children[imageToDisplay].src = sources[imageToDisplay];\n\t\n\t                            children[lastActiveImage].style.display = 'none';\n\t                            children[imageToDisplay].style.display = 'block';\n\t\n\t                            loadedImages[imageToDisplay] = true;\n\t\n\t                            lastActiveImage = imageToDisplay;\n\t                        };\n\t\n\t                        image.src = sources[imageToDisplay];\n\t                    } else {\n\t                        children[lastActiveImage].style.display = 'none';\n\t                        children[imageToDisplay].style.display = 'block';\n\t                        lastActiveImage = imageToDisplay;\n\t                    }\n\t                } else {\n\t                    //make sure for initial check call the .src is set correctly\n\t                    children[imageToDisplay].src = sources[imageToDisplay];\n\t                }\n\t            }\n\t\n\t            element.resizeSensor = new ResizeSensor(element, check);\n\t            check();\n\t\n\t            if (trackingActive) {\n\t                elements.push(element);\n\t            }\n\t        }\n\t\n\t        function findResponsiveImages(){\n\t            var query = getQuery();\n\t\n\t            var elements = query('[data-responsive-image],[responsive-image]');\n\t            for (var i = 0, j = elements.length; i < j; i++) {\n\t                attachResponsiveImage(elements[i]);\n\t            }\n\t        }\n\t\n\t        var regex = /,?[\\s\\t]*([^,\\n]*?)((?:\\[[\\s\\t]*?(?:min|max)-(?:width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"[^\"]*?\"[\\s\\t]*?])+)([^,\\n\\s\\{]*)/mgi;\n\t        var attrRegex = /\\[[\\s\\t]*?(min|max)-(width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"([^\"]*?)\"[\\s\\t]*?]/mgi;\n\t        /**\n\t         * @param {String} css\n\t         */\n\t        function extractQuery(css) {\n\t            var match;\n\t            var smatch;\n\t            css = css.replace(/'/g, '\"');\n\t            while (null !== (match = regex.exec(css))) {\n\t                smatch = match[1] + match[3];\n\t                attrs = match[2];\n\t\n\t                while (null !== (attrMatch = attrRegex.exec(attrs))) {\n\t                    queueQuery(smatch, attrMatch[1], attrMatch[2], attrMatch[3]);\n\t                }\n\t            }\n\t        }\n\t\n\t        /**\n\t         * @param {CssRule[]|String} rules\n\t         */\n\t        function readRules(rules) {\n\t            var selector = '';\n\t            if (!rules) {\n\t                return;\n\t            }\n\t            if ('string' === typeof rules) {\n\t                rules = rules.toLowerCase();\n\t                if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {\n\t                    extractQuery(rules);\n\t                }\n\t            } else {\n\t                for (var i = 0, j = rules.length; i < j; i++) {\n\t                    if (1 === rules[i].type) {\n\t                        selector = rules[i].selectorText || rules[i].cssText;\n\t                        if (-1 !== selector.indexOf('min-height') || -1 !== selector.indexOf('max-height')) {\n\t                            extractQuery(selector);\n\t                        }else if(-1 !== selector.indexOf('min-width') || -1 !== selector.indexOf('max-width')) {\n\t                            extractQuery(selector);\n\t                        }\n\t                    } else if (4 === rules[i].type) {\n\t                        readRules(rules[i].cssRules || rules[i].rules);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        var defaultCssInjected = false;\n\t\n\t        /**\n\t         * Searches all css rules and setups the event listener to all elements with element query rules..\n\t         *\n\t         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n\t         *                               (no garbage collection possible if you don not call .detach() first)\n\t         */\n\t        this.init = function(withTracking) {\n\t            trackingActive = typeof withTracking === 'undefined' ? false : withTracking;\n\t\n\t            for (var i = 0, j = document.styleSheets.length; i < j; i++) {\n\t                try {\n\t                    readRules(document.styleSheets[i].cssRules || document.styleSheets[i].rules || document.styleSheets[i].cssText);\n\t                } catch(e) {\n\t                    if (e.name !== 'SecurityError') {\n\t                        throw e;\n\t                    }\n\t                }\n\t            }\n\t\n\t            if (!defaultCssInjected) {\n\t                var style = document.createElement('style');\n\t                style.type = 'text/css';\n\t                style.innerHTML = '[responsive-image] > img, [data-responsive-image] {overflow: hidden; padding: 0; } [responsive-image] > img, [data-responsive-image] > img { width: 100%;}';\n\t                document.getElementsByTagName('head')[0].appendChild(style);\n\t                defaultCssInjected = true;\n\t            }\n\t\n\t            findElementQueriesElements();\n\t            findResponsiveImages();\n\t        };\n\t\n\t        /**\n\t         *\n\t         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n\t         *                               (no garbage collection possible if you don not call .detach() first)\n\t         */\n\t        this.update = function(withTracking) {\n\t            this.init(withTracking);\n\t        };\n\t\n\t        this.detach = function() {\n\t            if (!this.withTracking) {\n\t                throw 'withTracking is not enabled. We can not detach elements since we don not store it.' +\n\t                'Use ElementQueries.withTracking = true; before domready or call ElementQueryes.update(true).';\n\t            }\n\t\n\t            var element;\n\t            while (element = elements.pop()) {\n\t                ElementQueries.detach(element);\n\t            }\n\t\n\t            elements = [];\n\t        };\n\t    };\n\t\n\t    /**\n\t     *\n\t     * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n\t     *                               (no garbage collection possible if you don not call .detach() first)\n\t     */\n\t    ElementQueries.update = function(withTracking) {\n\t        ElementQueries.instance.update(withTracking);\n\t    };\n\t\n\t    /**\n\t     * Removes all sensor and elementquery information from the element.\n\t     *\n\t     * @param {HTMLElement} element\n\t     */\n\t    ElementQueries.detach = function(element) {\n\t        if (element.elementQueriesSetupInformation) {\n\t            //element queries\n\t            element.elementQueriesSensor.detach();\n\t            delete element.elementQueriesSetupInformation;\n\t            delete element.elementQueriesSensor;\n\t\n\t        } else if (element.resizeSensor) {\n\t            //responsive image\n\t\n\t            element.resizeSensor.detach();\n\t            delete element.resizeSensor;\n\t        } else {\n\t            //console.log('detached already', element);\n\t        }\n\t    };\n\t\n\t    ElementQueries.withTracking = false;\n\t\n\t    ElementQueries.init = function() {\n\t        if (!ElementQueries.instance) {\n\t            ElementQueries.instance = new ElementQueries();\n\t        }\n\t\n\t        ElementQueries.instance.init(ElementQueries.withTracking);\n\t    };\n\t\n\t    var domLoaded = function (callback) {\n\t        /* Internet Explorer */\n\t        /*@cc_on\n\t         @if (@_win32 || @_win64)\n\t         document.write('<script id=\"ieScriptLoad\" defer src=\"//:\"><\\/script>');\n\t         document.getElementById('ieScriptLoad').onreadystatechange = function() {\n\t         if (this.readyState == 'complete') {\n\t         callback();\n\t         }\n\t         };\n\t         @end @*/\n\t        /* Mozilla, Chrome, Opera */\n\t        if (document.addEventListener) {\n\t            document.addEventListener('DOMContentLoaded', callback, false);\n\t        }\n\t        /* Safari, iCab, Konqueror */\n\t        else if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {\n\t            var DOMLoadTimer = setInterval(function () {\n\t                if (/loaded|complete/i.test(document.readyState)) {\n\t                    callback();\n\t                    clearInterval(DOMLoadTimer);\n\t                }\n\t            }, 10);\n\t        }\n\t        /* Other web browsers */\n\t        else window.onload = callback;\n\t    };\n\t\n\t    ElementQueries.listen = function() {\n\t        domLoaded(ElementQueries.init);\n\t    };\n\t\n\t    // make available to common module loader\n\t    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t        module.exports = ElementQueries;\n\t    }\n\t    else {\n\t        window.ElementQueries = ElementQueries;\n\t        ElementQueries.listen();\n\t    }\n\t\n\t    return ElementQueries;\n\t\n\t}));\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// Vueresize.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fe634ba75c417f57f5cc","import {ResizeSensor} from 'css-element-queries'\r\n\r\nexport default {\r\n    inserted (el, {value}) {\r\n        ResizeSensor(el, () => value(el))\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Vueresize.js","/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(factory);\n    } else if (typeof exports === \"object\") {\n        module.exports = factory();\n    } else {\n        root.ResizeSensor = factory();\n    }\n}(this, function () {\n\n    //Make sure it does not throw in a SSR (Server Side Rendering) situation\n    if (typeof window === \"undefined\") {\n        return null;\n    }\n    // Only used for the dirty checking, so the event callback count is limted to max 1 call per fps per sensor.\n    // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and\n    // would generate too many unnecessary events.\n    var requestAnimationFrame = window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        function (fn) {\n            return window.setTimeout(fn, 20);\n        };\n\n    /**\n     * Iterate over each of the provided element(s).\n     *\n     * @param {HTMLElement|HTMLElement[]} elements\n     * @param {Function}                  callback\n     */\n    function forEachElement(elements, callback){\n        var elementsType = Object.prototype.toString.call(elements);\n        var isCollectionTyped = ('[object Array]' === elementsType\n            || ('[object NodeList]' === elementsType)\n            || ('[object HTMLCollection]' === elementsType)\n            || ('[object Object]' === elementsType)\n            || ('undefined' !== typeof jQuery && elements instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && elements instanceof Elements) //mootools\n        );\n        var i = 0, j = elements.length;\n        if (isCollectionTyped) {\n            for (; i < j; i++) {\n                callback(elements[i]);\n            }\n        } else {\n            callback(elements);\n        }\n    }\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            var q = [];\n            this.add = function(ev) {\n                q.push(ev);\n            };\n\n            var i, j;\n            this.call = function() {\n                for (i = 0, j = q.length; i < j; i++) {\n                    q[i].call();\n                }\n            };\n\n            this.remove = function(ev) {\n                var newQueue = [];\n                for(i = 0, j = q.length; i < j; i++) {\n                    if(q[i] !== ev) newQueue.push(q[i]);\n                }\n                q = newQueue;\n            }\n\n            this.length = function() {\n                return q.length;\n            }\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {String}      prop\n         * @returns {String|Number}\n         */\n        function getComputedStyle(element, prop) {\n            if (element.currentStyle) {\n                return element.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\n            } else {\n                return element.style[prop];\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element.resizedAttached) {\n                element.resizedAttached = new EventQueue();\n                element.resizedAttached.add(resized);\n            } else if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            if (getComputedStyle(element, 'position') == 'static') {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var dirty, rafId, newWidth, newHeight;\n            var lastWidth = element.offsetWidth;\n            var lastHeight = element.offsetHeight;\n\n            var reset = function() {\n                expandChild.style.width = '100000px';\n                expandChild.style.height = '100000px';\n\n                expand.scrollLeft = 100000;\n                expand.scrollTop = 100000;\n\n                shrink.scrollLeft = 100000;\n                shrink.scrollTop = 100000;\n            };\n\n            reset();\n\n            var onResized = function() {\n                rafId = 0;\n\n                if (!dirty) return;\n\n                lastWidth = newWidth;\n                lastHeight = newHeight;\n\n                if (element.resizedAttached) {\n                    element.resizedAttached.call();\n                }\n            };\n\n            var onScroll = function() {\n                newWidth = element.offsetWidth;\n                newHeight = element.offsetHeight;\n                dirty = newWidth != lastWidth || newHeight != lastHeight;\n\n                if (dirty && !rafId) {\n                    rafId = requestAnimationFrame(onResized);\n                }\n\n                reset();\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n        }\n\n        forEachElement(element, function(elem){\n            attachResizeEvent(elem, callback);\n        });\n\n        this.detach = function(ev) {\n            ResizeSensor.detach(element, ev);\n        };\n    };\n\n    ResizeSensor.detach = function(element, ev) {\n        forEachElement(element, function(elem){\n            if(elem.resizedAttached && typeof ev == \"function\"){\n                elem.resizedAttached.remove(ev);\n                if(elem.resizedAttached.length()) return;\n            }\n            if (elem.resizeSensor) {\n                if (elem.contains(elem.resizeSensor)) {\n                    elem.removeChild(elem.resizeSensor);\n                }\n                delete elem.resizeSensor;\n                delete elem.resizedAttached;\n            }\n        });\n    };\n\n    return ResizeSensor;\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-element-queries/src/ResizeSensor.js\n// module id = 1\n// module chunks = 0","module.exports = {\n    ResizeSensor: require('./src/ResizeSensor'),\n    ElementQueries: require('./src/ElementQueries')\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-element-queries/index.js\n// module id = 2\n// module chunks = 0","/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(['./ResizeSensor.js'], factory);\n    } else if (typeof exports === \"object\") {\n        module.exports = factory(require('./ResizeSensor.js'));\n    } else {\n        root.ElementQueries = factory(root.ResizeSensor);\n    }\n}(this, function (ResizeSensor) {\n\n    /**\n     *\n     * @type {Function}\n     * @constructor\n     */\n    var ElementQueries = function() {\n\n        var trackingActive = false;\n        var elements = [];\n\n        /**\n         *\n         * @param element\n         * @returns {Number}\n         */\n        function getEmSize(element) {\n            if (!element) {\n                element = document.documentElement;\n            }\n            var fontSize = window.getComputedStyle(element, null).fontSize;\n            return parseFloat(fontSize) || 16;\n        }\n\n        /**\n         *\n         * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE\n         *\n         * @param {HTMLElement} element\n         * @param {*} value\n         * @returns {*}\n         */\n        function convertToPx(element, value) {\n            var numbers = value.split(/\\d/);\n            var units = numbers[numbers.length-1];\n            value = parseFloat(value);\n            switch (units) {\n                case \"px\":\n                    return value;\n                case \"em\":\n                    return value * getEmSize(element);\n                case \"rem\":\n                    return value * getEmSize();\n                // Viewport units!\n                // According to http://quirksmode.org/mobile/tableViewport.html\n                // documentElement.clientWidth/Height gets us the most reliable info\n                case \"vw\":\n                    return value * document.documentElement.clientWidth / 100;\n                case \"vh\":\n                    return value * document.documentElement.clientHeight / 100;\n                case \"vmin\":\n                case \"vmax\":\n                    var vw = document.documentElement.clientWidth / 100;\n                    var vh = document.documentElement.clientHeight / 100;\n                    var chooser = Math[units === \"vmin\" ? \"min\" : \"max\"];\n                    return value * chooser(vw, vh);\n                default:\n                    return value;\n                // for now, not supporting physical units (since they are just a set number of px)\n                // or ex/ch (getting accurate measurements is hard)\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @constructor\n         */\n        function SetupInformation(element) {\n            this.element = element;\n            this.options = {};\n            var key, option, width = 0, height = 0, value, actualValue, attrValues, attrValue, attrName;\n\n            /**\n             * @param {Object} option {mode: 'min|max', property: 'width|height', value: '123px'}\n             */\n            this.addOption = function(option) {\n                var idx = [option.mode, option.property, option.value].join(',');\n                this.options[idx] = option;\n            };\n\n            var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];\n\n            /**\n             * Extracts the computed width/height and sets to min/max- attribute.\n             */\n            this.call = function() {\n                // extract current dimensions\n                width = this.element.offsetWidth;\n                height = this.element.offsetHeight;\n\n                attrValues = {};\n\n                for (key in this.options) {\n                    if (!this.options.hasOwnProperty(key)){\n                        continue;\n                    }\n                    option = this.options[key];\n\n                    value = convertToPx(this.element, option.value);\n\n                    actualValue = option.property == 'width' ? width : height;\n                    attrName = option.mode + '-' + option.property;\n                    attrValue = '';\n\n                    if (option.mode == 'min' && actualValue >= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (option.mode == 'max' && actualValue <= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (!attrValues[attrName]) attrValues[attrName] = '';\n                    if (attrValue && -1 === (' '+attrValues[attrName]+' ').indexOf(' ' + attrValue + ' ')) {\n                        attrValues[attrName] += ' ' + attrValue;\n                    }\n                }\n\n                for (var k in attributes) {\n                    if(!attributes.hasOwnProperty(k)) continue;\n\n                    if (attrValues[attributes[k]]) {\n                        this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));\n                    } else {\n                        this.element.removeAttribute(attributes[k]);\n                    }\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {Object}      options\n         */\n        function setupElement(element, options) {\n            if (element.elementQueriesSetupInformation) {\n                element.elementQueriesSetupInformation.addOption(options);\n            } else {\n                element.elementQueriesSetupInformation = new SetupInformation(element);\n                element.elementQueriesSetupInformation.addOption(options);\n                element.elementQueriesSensor = new ResizeSensor(element, function() {\n                    element.elementQueriesSetupInformation.call();\n                });\n            }\n            element.elementQueriesSetupInformation.call();\n\n            if (trackingActive && elements.indexOf(element) < 0) {\n                elements.push(element);\n            }\n        }\n\n        /**\n         * @param {String} selector\n         * @param {String} mode min|max\n         * @param {String} property width|height\n         * @param {String} value\n         */\n        var allQueries = {};\n        function queueQuery(selector, mode, property, value) {\n            if (typeof(allQueries[mode]) == 'undefined') allQueries[mode] = {};\n            if (typeof(allQueries[mode][property]) == 'undefined') allQueries[mode][property] = {};\n            if (typeof(allQueries[mode][property][value]) == 'undefined') allQueries[mode][property][value] = selector;\n            else allQueries[mode][property][value] += ','+selector;\n        }\n\n        function getQuery() {\n            var query;\n            if (document.querySelectorAll) query = document.querySelectorAll.bind(document);\n            if (!query && 'undefined' !== typeof $$) query = $$;\n            if (!query && 'undefined' !== typeof jQuery) query = jQuery;\n\n            if (!query) {\n                throw 'No document.querySelectorAll, jQuery or Mootools\\'s $$ found.';\n            }\n\n            return query;\n        }\n\n        /**\n         * Start the magic. Go through all collected rules (readRules()) and attach the resize-listener.\n         */\n        function findElementQueriesElements() {\n            var query = getQuery();\n\n            for (var mode in allQueries) if (allQueries.hasOwnProperty(mode)) {\n\n                for (var property in allQueries[mode]) if (allQueries[mode].hasOwnProperty(property)) {\n                    for (var value in allQueries[mode][property]) if (allQueries[mode][property].hasOwnProperty(value)) {\n                        var elements = query(allQueries[mode][property][value]);\n                        for (var i = 0, j = elements.length; i < j; i++) {\n                            setupElement(elements[i], {\n                                mode: mode,\n                                property: property,\n                                value: value\n                            });\n                        }\n                    }\n                }\n\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         */\n        function attachResponsiveImage(element) {\n            var children = [];\n            var rules = [];\n            var sources = [];\n            var defaultImageId = 0;\n            var lastActiveImage = -1;\n            var loadedImages = [];\n\n            for (var i in element.children) {\n                if(!element.children.hasOwnProperty(i)) continue;\n\n                if (element.children[i].tagName && element.children[i].tagName.toLowerCase() === 'img') {\n                    children.push(element.children[i]);\n\n                    var minWidth = element.children[i].getAttribute('min-width') || element.children[i].getAttribute('data-min-width');\n                    //var minHeight = element.children[i].getAttribute('min-height') || element.children[i].getAttribute('data-min-height');\n                    var src = element.children[i].getAttribute('data-src') || element.children[i].getAttribute('url');\n\n                    sources.push(src);\n\n                    var rule = {\n                        minWidth: minWidth\n                    };\n\n                    rules.push(rule);\n\n                    if (!minWidth) {\n                        defaultImageId = children.length - 1;\n                        element.children[i].style.display = 'block';\n                    } else {\n                        element.children[i].style.display = 'none';\n                    }\n                }\n            }\n\n            lastActiveImage = defaultImageId;\n\n            function check() {\n                var imageToDisplay = false, i;\n\n                for (i in children){\n                    if(!children.hasOwnProperty(i)) continue;\n\n                    if (rules[i].minWidth) {\n                        if (element.offsetWidth > rules[i].minWidth) {\n                            imageToDisplay = i;\n                        }\n                    }\n                }\n\n                if (!imageToDisplay) {\n                    //no rule matched, show default\n                    imageToDisplay = defaultImageId;\n                }\n\n                if (lastActiveImage != imageToDisplay) {\n                    //image change\n\n                    if (!loadedImages[imageToDisplay]){\n                        //image has not been loaded yet, we need to load the image first in memory to prevent flash of\n                        //no content\n\n                        var image = new Image();\n                        image.onload = function() {\n                            children[imageToDisplay].src = sources[imageToDisplay];\n\n                            children[lastActiveImage].style.display = 'none';\n                            children[imageToDisplay].style.display = 'block';\n\n                            loadedImages[imageToDisplay] = true;\n\n                            lastActiveImage = imageToDisplay;\n                        };\n\n                        image.src = sources[imageToDisplay];\n                    } else {\n                        children[lastActiveImage].style.display = 'none';\n                        children[imageToDisplay].style.display = 'block';\n                        lastActiveImage = imageToDisplay;\n                    }\n                } else {\n                    //make sure for initial check call the .src is set correctly\n                    children[imageToDisplay].src = sources[imageToDisplay];\n                }\n            }\n\n            element.resizeSensor = new ResizeSensor(element, check);\n            check();\n\n            if (trackingActive) {\n                elements.push(element);\n            }\n        }\n\n        function findResponsiveImages(){\n            var query = getQuery();\n\n            var elements = query('[data-responsive-image],[responsive-image]');\n            for (var i = 0, j = elements.length; i < j; i++) {\n                attachResponsiveImage(elements[i]);\n            }\n        }\n\n        var regex = /,?[\\s\\t]*([^,\\n]*?)((?:\\[[\\s\\t]*?(?:min|max)-(?:width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"[^\"]*?\"[\\s\\t]*?])+)([^,\\n\\s\\{]*)/mgi;\n        var attrRegex = /\\[[\\s\\t]*?(min|max)-(width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"([^\"]*?)\"[\\s\\t]*?]/mgi;\n        /**\n         * @param {String} css\n         */\n        function extractQuery(css) {\n            var match;\n            var smatch;\n            css = css.replace(/'/g, '\"');\n            while (null !== (match = regex.exec(css))) {\n                smatch = match[1] + match[3];\n                attrs = match[2];\n\n                while (null !== (attrMatch = attrRegex.exec(attrs))) {\n                    queueQuery(smatch, attrMatch[1], attrMatch[2], attrMatch[3]);\n                }\n            }\n        }\n\n        /**\n         * @param {CssRule[]|String} rules\n         */\n        function readRules(rules) {\n            var selector = '';\n            if (!rules) {\n                return;\n            }\n            if ('string' === typeof rules) {\n                rules = rules.toLowerCase();\n                if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {\n                    extractQuery(rules);\n                }\n            } else {\n                for (var i = 0, j = rules.length; i < j; i++) {\n                    if (1 === rules[i].type) {\n                        selector = rules[i].selectorText || rules[i].cssText;\n                        if (-1 !== selector.indexOf('min-height') || -1 !== selector.indexOf('max-height')) {\n                            extractQuery(selector);\n                        }else if(-1 !== selector.indexOf('min-width') || -1 !== selector.indexOf('max-width')) {\n                            extractQuery(selector);\n                        }\n                    } else if (4 === rules[i].type) {\n                        readRules(rules[i].cssRules || rules[i].rules);\n                    }\n                }\n            }\n        }\n\n        var defaultCssInjected = false;\n\n        /**\n         * Searches all css rules and setups the event listener to all elements with element query rules..\n         *\n         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n         *                               (no garbage collection possible if you don not call .detach() first)\n         */\n        this.init = function(withTracking) {\n            trackingActive = typeof withTracking === 'undefined' ? false : withTracking;\n\n            for (var i = 0, j = document.styleSheets.length; i < j; i++) {\n                try {\n                    readRules(document.styleSheets[i].cssRules || document.styleSheets[i].rules || document.styleSheets[i].cssText);\n                } catch(e) {\n                    if (e.name !== 'SecurityError') {\n                        throw e;\n                    }\n                }\n            }\n\n            if (!defaultCssInjected) {\n                var style = document.createElement('style');\n                style.type = 'text/css';\n                style.innerHTML = '[responsive-image] > img, [data-responsive-image] {overflow: hidden; padding: 0; } [responsive-image] > img, [data-responsive-image] > img { width: 100%;}';\n                document.getElementsByTagName('head')[0].appendChild(style);\n                defaultCssInjected = true;\n            }\n\n            findElementQueriesElements();\n            findResponsiveImages();\n        };\n\n        /**\n         *\n         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n         *                               (no garbage collection possible if you don not call .detach() first)\n         */\n        this.update = function(withTracking) {\n            this.init(withTracking);\n        };\n\n        this.detach = function() {\n            if (!this.withTracking) {\n                throw 'withTracking is not enabled. We can not detach elements since we don not store it.' +\n                'Use ElementQueries.withTracking = true; before domready or call ElementQueryes.update(true).';\n            }\n\n            var element;\n            while (element = elements.pop()) {\n                ElementQueries.detach(element);\n            }\n\n            elements = [];\n        };\n    };\n\n    /**\n     *\n     * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n     *                               (no garbage collection possible if you don not call .detach() first)\n     */\n    ElementQueries.update = function(withTracking) {\n        ElementQueries.instance.update(withTracking);\n    };\n\n    /**\n     * Removes all sensor and elementquery information from the element.\n     *\n     * @param {HTMLElement} element\n     */\n    ElementQueries.detach = function(element) {\n        if (element.elementQueriesSetupInformation) {\n            //element queries\n            element.elementQueriesSensor.detach();\n            delete element.elementQueriesSetupInformation;\n            delete element.elementQueriesSensor;\n\n        } else if (element.resizeSensor) {\n            //responsive image\n\n            element.resizeSensor.detach();\n            delete element.resizeSensor;\n        } else {\n            //console.log('detached already', element);\n        }\n    };\n\n    ElementQueries.withTracking = false;\n\n    ElementQueries.init = function() {\n        if (!ElementQueries.instance) {\n            ElementQueries.instance = new ElementQueries();\n        }\n\n        ElementQueries.instance.init(ElementQueries.withTracking);\n    };\n\n    var domLoaded = function (callback) {\n        /* Internet Explorer */\n        /*@cc_on\n         @if (@_win32 || @_win64)\n         document.write('<script id=\"ieScriptLoad\" defer src=\"//:\"><\\/script>');\n         document.getElementById('ieScriptLoad').onreadystatechange = function() {\n         if (this.readyState == 'complete') {\n         callback();\n         }\n         };\n         @end @*/\n        /* Mozilla, Chrome, Opera */\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', callback, false);\n        }\n        /* Safari, iCab, Konqueror */\n        else if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {\n            var DOMLoadTimer = setInterval(function () {\n                if (/loaded|complete/i.test(document.readyState)) {\n                    callback();\n                    clearInterval(DOMLoadTimer);\n                }\n            }, 10);\n        }\n        /* Other web browsers */\n        else window.onload = callback;\n    };\n\n    ElementQueries.listen = function() {\n        domLoaded(ElementQueries.init);\n    };\n\n    // make available to common module loader\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = ElementQueries;\n    }\n    else {\n        window.ElementQueries = ElementQueries;\n        ElementQueries.listen();\n    }\n\n    return ElementQueries;\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-element-queries/src/ElementQueries.js\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}